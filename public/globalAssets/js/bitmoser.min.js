/**
 * @package BSJs Library
 * -----------------------
 * @author Obi Pascal Banjuare <pascalobi83@gmail.com>
 * @license MIT
 * @description I design this js library for myself as a simple helper file for fetching  request from server communicating with my web application as ease to my work and xhr request handling. If you wish to obtain this library or contribute to it please bewear that this library is NOT FOR SALE.
 */

 //create a symbole 
 const s = Symbol("BS");
 //convert symbol to object
 const bs = Object(s);

 /** [Start: Program ] */

 //request base url settings
 bs.baseUrl =  (host=null, env=null, writable=false) => {
     
    let baseSettings = {
       scheme: 'http://',
       host: 'localhost/',
       env: 'development',
       segment: 'bitmoser/public/'
    };

    /** determine the environ */
    if(!Object.is(host, null) && !Object.is(env, null) && env === 'production')
    {
        //return a production url formate
        //valid host sample www.example.com
        return 'https://'+host+'/';// return https://www.example.com/
    }
    else if(writable){
        return baseSettings.scheme+baseSettings.host+'bitmoser/writable/';
    }
    else
    {
        //fall back to local host on lest the settings are made directly here in baseSettings object. 
        return baseSettings.scheme + baseSettings.host + baseSettings.segment; // returns http://localhost/bitmoser/public/.
    }

 };
//make and ajax request
bs.makeRequest =  (url='', method='GET', data={}, dataType='JSON') => {
    //set the request headers
    bs.setRequestHeaders();
    //make request
    let res = $.ajax({
        url: bs.baseUrl()+ url,
        method: method,
        data: data,
        cache: false,
        dataType: dataType
    });

    //call the error loger
    bs.xhrRequestErrors();
    //return the response
    return res;

};
/** Set the request headers */
bs.setRequestHeaders =  (settings ={}) => {
    $(document).ajaxSend(function(e, xhr, s){
        //make ajax settings 

        /**[Start] Set the request headers  */
        //default header
        xhr.setRequestHeader("X-Request-With", "XMLHttpRequest");
        

        //automatic set the settings

        //retrive the settings keys
        let settingsKeys = Object.keys(settings);

       
        //we will use the keys to retrive the values
        for (let i = 0; i < settingsKeys.length; i++) {
            //set the header 
            xhr.setRequestHeader(settingsKeys[i],settings[settingsKeys[i]]);
        }

        /** [End] */


        
    }); 
};
/** The ajax loader parse to a selector .bs_xhr_loader */
bs.getLoader =  () => {
    return `<small class="bs-ajax-loader" data-show="false"><i class="fa fa-spinner bs-router"></i></small>`;
};
/** show the xhr loader*/
bs.showLoader =  () => {
        //show the loader when the loader data is set to false, which means the loader is not visible yet.
        let isVisible = $(document).find('.bs-ajax-loader').data('show');//boolean

        if(!isVisible)
        {
            //the loader is not visible then show it and set the visiblity to true
            $(document).find('.bs-ajax-loader').fadeIn('slow');
            //set the visibility to true
            $(document).find('.bs-ajax-loader').data('show', true);//boolean  
            //check that the visibility is set to true then return true
            isVisible = $(document).find('.bs-ajax-loader').data('show');//boolean
            
            if(isVisible)
            {
                return true;
            }
            else{
                return false;
            }
        }
};

/** Hide th xhr loader  */
bs.hideLoader =  () => {
        //show the loader when the loader data is set to false, which means the loader is not visible yet.
        let isVisible = $(document).find('.bs-ajax-loader').data('show');//boolean

        if(isVisible)
        {
            //the loader is set to visible then hide it and set the visiblity to false
            $(document).find('.bs-ajax-loader').fadeOut('slow');
            //set the visibility to false
            $(document).find('.bs-ajax-loader').data('show', false);//boolean  
            //check that the visibility is set to true then return true
            isVisible = $(document).find('.bs-ajax-loader').data('show');//boolean
            
            if(!isVisible)
            {
                return true;
            }
            else{
                return false;
            }
        }
};
/** the main loader that is called passing the target to load  the loader and an optional selector for success msg. */
bs.loader =  (selector) => {

    //parse the xhr load loader
    $(document).find('.'+selector+'').html(bs.getLoader());

    //request is been sent
    $(document).ajaxSend(function(){
        //show loader 
        bs.showLoader();
    });

    //request completed
    $(document).ajaxComplete(function(){
        //hide the loader 
        bs.hideLoader();
    });

    
};

/** Check and log error for each request  */
bs.xhrRequestErrors = () => {
    //log the any error that occourse
    $(document).ajaxError(function(e, xhr, s, er){
       //log errors
        console.error(er);
        
    });
};

/** Before sending request */
bs.beforeRequest = (options = {}, selector='push_progress') => {
    /** Disabled form submit button */
    let disableSubmit = options.hasOwnProperty('submitDiabled') ? options.submitDisabled : true;
    /** The targetted form id */
    let targetForm = options.hasOwnProperty('form') ? options.form : false;
    /** Before send message to be displayed to the user during form submition */
    let beforeSendMsg = options.hasOwnProperty('beforeSend') ? options.beforeSend : 'Processing..';
    /** After the form subition has complete message to be displayed to the user */
    let afterSendMesg = options.hasOwnProperty('afterSend') ? optioins.afterSend : 'Done!';
    /** The success message to be display to the user */
    let successMsg = options.hasOwnProperty('success') ? options.success : false;


    if(!targetForm)
    {   //invlaid form id
        console.error('Invlaid targeted form id');
        
    }
    else
    {
        //make sure the disableSubmit option is set
        if(disableSubmit)
        {
            //disabled form submit button
            $(document).on('submit', 'form#'+targetForm+'', function(e){
                //stop the form default submition behavior
                e.preventDefault();

                //find and desabled the submit button
                $(document).find('form#'+targetForm+' button[type=submit]').prop('disabled', true);
            });

            //re-enabled the button after ajax complete
            $(document).ajaxComplete(function(){
                $(document).find('form#'+targetForm+' button[type=submit]').prop('disabled', false);
                
            });
        }
    }

    /** before send message */
    $(document).ajaxSend(function(){
        $(document).find('.'+selector+'').html(beforeSendMsg);
        
    });

    /** after send message */
    $(document).ajaxComplete(function(){
        $(document).find('.'+selector+'').html(afterSendMesg);
    });

    //
    if(successMsg != false)
    {
        bs.alert({
            title: 'Success',
            body: successMsg,
            type: 'success'
        }, 20000);
    }




};
/** 
 * Alerter
 * -------
 */

 /**
  * alert template
  */
 bs.alertTemplate = () => {
    $(document).find('footer').append(
         `
         <div class="alert alert-info border rounded-0 shadow-lg bs_b_alert" role="alert" style="position: fixed !important;width: 100% !important;z-index: 1090 !important;top: -130px !important; left:0 !important; right:0 !important" data-show="false">

         <button class="btn btn-link btn-sm text-light bs_b_alert_close" type="button" style="position: absolute;right: 13px !important;top: 4px !important;background-color: rgba(0,0,0,0);border: 0 !important;border-radius: 0 !important;">
         <i class="fa fa-close" style="color: rgba(0,0,0,0.4);background-color: rgba(0,0,0,0);font-size: x-large;"></i></button>
            <h4 class="alert-heading"><i class="alert_icon fas fa-bell shadow-lg text-info"></i>
                <strong class="alert_title"></strong></h4>
                <p style="font-size: larger;" class="alert_body">Paragraph</p>
        </div>
         `
    );
    
    
 };

 /**
  * BS basic simple alert function 
  */
bs.alert = (init={}, timeout=10000) => {
    /** Show alert */
    let alertShow = function(timeout=3000){
		 //alert hide position: -130px !important;
		//alert show position: 0px !important;
		//show the alert
		
		$(document).find('.bs_b_alert').animate({
			top: '0px'
		}, 1000);
		
		//set is visibility to true
		$(document).find('.bs_b_alert').data('show', true);
		
        //check if to close the alert or wait ontill user clicks close x
        if(typeof(timeout) != 'number' && typeof(timeout) === 'string' && timeout === 'never')
        {
            //let the user clicks on close x
            alertClose();
        }
        else
        {
           
            //close the alert after timeout if the time out is typeof number is given
            setTimeout(() => {
                
                $(document).find('.bs_b_alert').animate({
                    'top': '-130px'
                }, 1000);
                
                //set it's visibility to false
                $(document).find('.bs_b_alert').data('show', false);
            }, timeout);
        }
	};
	
	
	/** when user clicks on class x the alert closes */
	let alertClose = function(){
		//check if the alert is shown
		var isShown = $(document).find('.bs_b_alert').data('show');
		if(isShown)
			{
				//hide the alert
				$(document).on('click', '.bs_b_alert_close', function(){
					
					$(document).find('.bs_b_alert').animate({
						top: '-130px'
					});
					
					$(document).find('.bs_b_alert').data('show', false);
					
					return true;
				});
			}
			else
				{
					// the alert is not shown
					console.error('Trying to call close alert when the alert is not visible.');
				}
	};
	
    
    /**
     * selectors
     * ----------
     * -> .bs_b_alert := The alert itself
     * -> .alert_icon := The alert icon
     * -> .alert_title := The title of the alert
     * -> .alert_body := The body or message of the alert.
     * 
     */

     /** Alert types */
     let alertTypes = {
         'danger' : 'alert-danger',
         'success': 'alert-success',
         'warning': 'alert-warning',
         'info' : 'alert-info'
     };
     /** Alert allowed types */
     let alertAllowedTypes = [
        'alert-danger',
        'alert-success',
        'alert-warning',
        'alert-info'
     ];
     /** Alert icons */
     let alertIcons = {
         'danger': 'fa-times-circle',
         'success': 'fa-check-circle',
         'warning': 'fa-warning',
         'info': 'fa-bell'
     };
     /** Alert Allowed Icons */
     let alertAllowedIcons = [
         'fa-times-circle',
         'fa-check-circle',         
         'fa-warning',
         'fa-bell'
     ];

     /** alert icons colors */
     let alertIconColors = {
         'danger': 'text-danger',
         'success': 'text-success',
         'warning': 'text-warning',
         'info': 'text-info'
     };
     /** alert allowed icons color */
     let alertAllowedIconColors = [
         'text-danger',
         'text-success',
         'text-warning',
         'text-info'
     ];

     /**Retrieve the alert object properties */
     let title = init.hasOwnProperty('title') ? init.title : 'A simple alert title';
     let body = init.hasOwnProperty('body') ? init.body : 'Alert content';
     let type = init.hasOwnProperty('type') ? init.type : 'info';

     /** check the type and read its properties set to the proper alert */
     let i = 0;
     let size = 4;
     switch (type) {
        case "danger":
             //retrieve the classes
             var alerttype = $(document).find('.bs_b_alert').attr('class');
             var icontype = $(document).find('.alert_icon').attr('class');
             var colortype = $(document).find('.alert_icon').attr('class');

             //change the alert type
             for(i; i < size; i++){
                 if(typeof(alerttype) != 'undefined' && typeof(alerttype) === 'string' && alerttype.includes(alertAllowedTypes[i]))
                 {
                    $(document).find('.bs_b_alert').removeClass(alertAllowedTypes[i]).delay(200).addClass(alertTypes[type]);
                 }
             }

             //reset the value of i for each loop
             i = 0;             
             //change the icon
             for(i; i < size; i++){
                 if(typeof(icontype) != 'undefined' && typeof(icontype) === 'string' && icontype.includes(alertAllowedIcons[i]))
                 { 
                    $(document).find('.alert_icon').removeClass(alertAllowedIcons[i]).delay(200).addClass(alertIcons[type]);
                 }
                 
             }
             //reset the value of i for each loop
             i = 0; 
             //change the icons color
             for(i; i < size; i++){
                 if(typeof(alerttype) != 'undefined' && typeof(colortype) === 'string' && colortype.includes(alertAllowedIconColors[i]))
                 {
                    $(document).find('.alert_icon').removeClass(alertAllowedIconColors[i]).delay(200).addClass(alertIconColors[type]);
                 }
             }

             //add the title body
             $(document).find('.alert_title').html(title);
             $(document).find('.alert_body').html(body);

             //iniciate the show and close alert 
             alertShow(timeout);
             alertClose();
            break;
        case "success":
            //retrieve the classes
             var alerttype = $(document).find('.bs_b_alert').attr('class');
             var icontype = $(document).find('.alert_icon').attr('class');
             var colortype = $(document).find('.alert_icon').attr('class');

             //change the alert type
             for(i; i < size; i++){
                 if(typeof(alerttype) != 'undefined' && typeof(alerttype) === 'string' && alerttype.includes(alertAllowedTypes[i]))
                 {
                    $(document).find('.bs_b_alert').removeClass(alertAllowedTypes[i]).delay(200).addClass(alertTypes[type]);
                 }
             }

             //reset the value of i for each loop
             i = 0;             
             //change the icon
             for(i; i < size; i++){
                 if(typeof(icontype) != 'undefined' && typeof(icontype) === 'string' && icontype.includes(alertAllowedIcons[i]))
                 { 
                    $(document).find('.alert_icon').removeClass(alertAllowedIcons[i]).delay(200).addClass(alertIcons[type]);
                 }
                 
             }
             //reset the value of i for each loop
             i = 0; 
             //change the icons color
             for(i; i < size; i++){
                 if(typeof(alerttype) != 'undefined' && typeof(colortype) === 'string' && colortype.includes(alertAllowedIconColors[i]))
                 {
                    $(document).find('.alert_icon').removeClass(alertAllowedIconColors[i]).delay(200).addClass(alertIconColors[type]);
                 }
             }

             //add the title body
             $(document).find('.alert_title').html(title);
             $(document).find('.alert_body').html(body);

             //iniciate the show and close alert 
             alertShow(timeout);
             alertClose();
           break;
        case "warning":
             //retrieve the classes
             var alerttype = $(document).find('.bs_b_alert').attr('class');
             var icontype = $(document).find('.alert_icon').attr('class');
             var colortype = $(document).find('.alert_icon').attr('class');

             //change the alert type
             for(i; i < size; i++){
                 if(typeof(alerttype) != 'undefined' && typeof(alerttype) === 'string' && alerttype.includes(alertAllowedTypes[i]))
                 {
                    $(document).find('.bs_b_alert').removeClass(alertAllowedTypes[i]).delay(200).addClass(alertTypes[type]);
                 }
             }

             //reset the value of i for each loop
             i = 0;             
             //change the icon
             for(i; i < size; i++){
                 if(typeof(icontype) != 'undefined' && typeof(icontype) === 'string' && icontype.includes(alertAllowedIcons[i]))
                 { 
                    $(document).find('.alert_icon').removeClass(alertAllowedIcons[i]).delay(200).addClass(alertIcons[type]);
                 }
                 
             }
             //reset the value of i for each loop
             i = 0; 
             //change the icons color
             for(i; i < size; i++){
                 if(typeof(alerttype) != 'undefined' && typeof(colortype) === 'string' && colortype.includes(alertAllowedIconColors[i]))
                 {
                    $(document).find('.alert_icon').removeClass(alertAllowedIconColors[i]).delay(200).addClass(alertIconColors[type]);
                 }
             }

             //add the title body
             $(document).find('.alert_title').html(title);
             $(document).find('.alert_body').html(body);

             //iniciate the show and close alert 
             alertShow(timeout);
             alertClose();
          break;
        case "info":
            //retrieve the classes
             var alerttype = $(document).find('.bs_b_alert').attr('class');
             var icontype = $(document).find('.alert_icon').attr('class');
             var colortype = $(document).find('.alert_icon').attr('class');

             //change the alert type
             for(i; i < size; i++){
                 if(typeof(alerttype) != 'undefined' && typeof(alerttype) === 'string' && alerttype.includes(alertAllowedTypes[i]))
                 {
                    $(document).find('.bs_b_alert').removeClass(alertAllowedTypes[i]).delay(200).addClass(alertTypes[type]);
                 }
             }

             //reset the value of i for each loop
             i = 0;             
             //change the icon
             for(i; i < size; i++){
                 if(typeof(icontype) != 'undefined' && typeof(icontype) === 'string' && icontype.includes(alertAllowedIcons[i]))
                 { 
                    $(document).find('.alert_icon').removeClass(alertAllowedIcons[i]).delay(200).addClass(alertIcons[type]);
                 }
                 
             }
             //reset the value of i for each loop
             i = 0; 
             //change the icons color
             for(i; i < size; i++){
                 if(typeof(alerttype) != 'undefined' && typeof(colortype) === 'string' && colortype.includes(alertAllowedIconColors[i]))
                 {
                    $(document).find('.alert_icon').removeClass(alertAllowedIconColors[i]).delay(200).addClass(alertIconColors[type]);
                 }
             }

             //add the title body
             $(document).find('.alert_title').html(title);
             $(document).find('.alert_body').html(body);

             //iniciate the show and close alert 
             alertShow(timeout);
             alertClose();
          break;
         default:
             break;
     }
};
//bind the BS to window property
window.BS = bs;
//parse the alert template
BS.alertTemplate();