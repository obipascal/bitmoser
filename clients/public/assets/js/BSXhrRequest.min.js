/**
 * @package BSJs Library
 * -----------------------
 * @author Obi Pascal Banjuare <pascalobi83@gmail.com>
 * @license MIT
 * @description I design this js library for myself as a simple helper file for fetching async request from server communicating with my web application as ease to my work and xhr request handling. If you wish to obtain this library or contribute to it please bewear that this library is NOT FOR SALE.
 */

 //create a symbole 
 const s = Symbol("BS");
 //convert symbol to object
 const bs = Object(s);

 /** [Start: Program ] */

 //request base url settings
 bs.baseUrl = async (host='', env='') => {
     
    let baseSettings = {
       scheme: 'http://',
       host: 'localhost/',
       env: 'development',
       segment: 'bitmoser/public/'
    };

    /** determine the environ */
    if(host != '' && env != '' && env === 'production')
    {
        //return a production url formate
        //valid host sample www.example.com
        return 'https://'+host+'/';// return https://www.example.com/
    }
    else
    {
        //fall back to local host on lest the settings are made directly here in baseSettings object. 
        return baseSettings.scheme + baseSettings.host + baseSettings.segment; // returns http://localhost/bitmoser/public/.
    }

 };
//make and ajax request
bs.makeRequest = async (url='', method='GET', data={}, dataType='JSON') => {
    //set the request headers
    bs.setRequestHeaders();
    //make request
    let res =   await  $.ajax({
        url: bs.baseUrl+ url,
        method: method,
        data: data,
        cache: false,
        dataType: dataType
    });

    //call the error loger
    bs.xhrRequestErrors();
    //return the response
    return res;

};
/** Set the request headers */
bs.setRequestHeaders = async (settings ={}) => {
    $(document).ajaxSend(function(e, xhr, s){
        //make ajax settings 

        /**[Start] Set the request headers  */
        //default header
        xhr.setRequestHeader("X-Request-With", "XMLHttpRequest");
        

        //automatic set the settings

        //retrive the settings keys
        let settingsKeys = Object.keys(settings);

       
        //we will use the keys to retrive the values
        for (let i = 0; i < settingsKeys.length; i++) {
            //set the header 
            xhr.setRequestHeader(settingsKeys[i],settings[settingsKeys[i]]);
        }

        /** [End] */


        
    }); 
};
/** The ajax loader parse to a selector .bs_xhr_loader */
bs.getLoader = async () => {
    return `<small class="bs-ajax-loader" data-show="false"><i class="fa fa-spinner bs-router"></i></small>`;
};
/** show the xhr loader*/
bs.showLoader = async () => {
        //show the loader when the loader data is set to false, which means the loader is not visible yet.
        let isVisible = $(document).find('.bs-ajax-loader').data('show');//boolean

        if(!isVisible)
        {
            //the loader is not visible then show it and set the visiblity to true
            $(document).find('.bs-ajax-loader').fadeIn('slow');
            //set the visibility to true
            $(document).find('.bs-ajax-loader').data('show', true);//boolean  
            //check that the visibility is set to true then return true
            isVisible = $(document).find('.bs-ajax-loader').data('show');//boolean
            
            if(isVisible)
            {
                return true;
            }
            else{
                return false;
            }
        }
};

/** Hide th xhr loader  */
bs.hideLoader = async () => {
        //show the loader when the loader data is set to false, which means the loader is not visible yet.
        let isVisible = $(document).find('.bs-ajax-loader').data('show');//boolean

        if(isVisible)
        {
            //the loader is set to visible then hide it and set the visiblity to false
            $(document).find('.bs-ajax-loader').fadeOut('slow');
            //set the visibility to false
            $(document).find('.bs-ajax-loader').data('show', false);//boolean  
            //check that the visibility is set to true then return true
            isVisible = $(document).find('.bs-ajax-loader').data('show');//boolean
            
            if(!isVisible)
            {
                return true;
            }
            else{
                return false;
            }
        }
};
/** the main loader that is called passing the target to load  the loader and an optional selector for success msg. */
bs.loader = async (selector,success='bs_xhr_success', msg = 'Your request Was successful!') => {

    //parse the xhr load loader
    $(document).find('.'+selector+'').html(bs.getLoader());

    //request is been sent
    $(document).ajaxSend(function(){
        //show loader 
        bs.showLoader();
    });

    //request completed
    $(document).ajaxComplete(function(){
        //hide the loader 
        bs.hideLoader();
    });

    //when the request complete with a success
    $(document).ajaxSuccess(function(){
        $(document).find('.'+success+'').html(`${msg}`)
    });






};

/** Check and log error for each request  */
bs.xhrRequestErrors = async  () => {
    //log the any error that occourse
    $(document).ajaxError(function(e, xhr, s, er){
       //log errors
        console.error(er);
        
    });
};

//bind the BS to window property
window.BS = bs;